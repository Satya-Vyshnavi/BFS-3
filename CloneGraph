BFS: 
T.c --> O(V+E)
S.c --> O(V)

class Solution {
    HashMap<Node,Node> map = new HashMap<>();
    public Node cloneGraph(Node node) {
        if(node == null){
            return null;
        }
       Queue<Node> q = new LinkedList<>();
       Node copyNode = clone(node);
       q.add(node);
       while(!q.isEmpty()){
         Node curr = q.poll();
         List<Node> neighbors = curr.neighbors;
         for(Node neighbor: neighbors){
            if(!map.containsKey(neighbor)){
               q.add(neighbor);
            }
            Node cloned = clone(neighbor);
            map.get(curr).neighbors.add(cloned);
         }
       }
      return copyNode;
    }
    private Node clone(Node node){
        if(map.containsKey(node)){
          return map.get(node);  
        }
        Node newNode = new Node(node.val);
        map.put(node, newNode);
        return newNode;
    }
}
********************************************************************
DFS: 
T.c --> O(V+E)
S.c --> O(V)
class Solution {
    HashMap<Node,Node> map = new HashMap<>();
    public Node cloneGraph(Node node) {
        if(node == null){
            return null;
        }
        dfs(node);
        return map.get(node);
    }
    private void dfs(Node node){
     //base
     if(map.containsKey(node)){
       return;
     }
     Node copyNode = clone(node);      
     //logic
     List<Node> neighbors = node.neighbors;
     for(Node neighbor: neighbors){
        dfs(neighbor);
        map.get(node).neighbors.add(map.get(neighbor));
     }   
    }

    private Node clone(Node node){
        if(map.containsKey(node)){
          return map.get(node);  
        }
        Node newNode = new Node(node.val);
        map.put(node, newNode);
        return newNode;
    }
}